// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: raw.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Contract_ContractType int32

const (
	Contract_AccountCreateContract           Contract_ContractType = 0
	Contract_TransferContract                Contract_ContractType = 1
	Contract_TransferAssetContract           Contract_ContractType = 2
	Contract_VoteAssetContract               Contract_ContractType = 3
	Contract_VoteWitnessContract             Contract_ContractType = 4
	Contract_WitnessCreateContract           Contract_ContractType = 5
	Contract_AssetIssueContract              Contract_ContractType = 6
	Contract_WitnessUpdateContract           Contract_ContractType = 8
	Contract_ParticipateAssetIssueContract   Contract_ContractType = 9
	Contract_AccountUpdateContract           Contract_ContractType = 10
	Contract_FreezeBalanceContract           Contract_ContractType = 11
	Contract_UnfreezeBalanceContract         Contract_ContractType = 12
	Contract_WithdrawBalanceContract         Contract_ContractType = 13
	Contract_UnfreezeAssetContract           Contract_ContractType = 14
	Contract_UpdateAssetContract             Contract_ContractType = 15
	Contract_ProposalCreateContract          Contract_ContractType = 16
	Contract_ProposalApproveContract         Contract_ContractType = 17
	Contract_ProposalDeleteContract          Contract_ContractType = 18
	Contract_SetAccountIdContract            Contract_ContractType = 19
	Contract_CustomContract                  Contract_ContractType = 20
	Contract_CreateSmartContract             Contract_ContractType = 30
	Contract_TriggerSmartContract            Contract_ContractType = 31
	Contract_GetContract                     Contract_ContractType = 32
	Contract_UpdateSettingContract           Contract_ContractType = 33
	Contract_ExchangeCreateContract          Contract_ContractType = 41
	Contract_ExchangeInjectContract          Contract_ContractType = 42
	Contract_ExchangeWithdrawContract        Contract_ContractType = 43
	Contract_ExchangeTransactionContract     Contract_ContractType = 44
	Contract_UpdateEnergyLimitContract       Contract_ContractType = 45
	Contract_AccountPermissionUpdateContract Contract_ContractType = 46
	Contract_ClearABIContract                Contract_ContractType = 48
	Contract_UpdateBrokerageContract         Contract_ContractType = 49
	Contract_ShieldedTransferContract        Contract_ContractType = 51
	Contract_MarketSellAssetContract         Contract_ContractType = 52
	Contract_MarketCancelOrderContract       Contract_ContractType = 53
)

// Enum value maps for Contract_ContractType.
var (
	Contract_ContractType_name = map[int32]string{
		0:  "AccountCreateContract",
		1:  "TransferContract",
		2:  "TransferAssetContract",
		3:  "VoteAssetContract",
		4:  "VoteWitnessContract",
		5:  "WitnessCreateContract",
		6:  "AssetIssueContract",
		8:  "WitnessUpdateContract",
		9:  "ParticipateAssetIssueContract",
		10: "AccountUpdateContract",
		11: "FreezeBalanceContract",
		12: "UnfreezeBalanceContract",
		13: "WithdrawBalanceContract",
		14: "UnfreezeAssetContract",
		15: "UpdateAssetContract",
		16: "ProposalCreateContract",
		17: "ProposalApproveContract",
		18: "ProposalDeleteContract",
		19: "SetAccountIdContract",
		20: "CustomContract",
		30: "CreateSmartContract",
		31: "TriggerSmartContract",
		32: "GetContract",
		33: "UpdateSettingContract",
		41: "ExchangeCreateContract",
		42: "ExchangeInjectContract",
		43: "ExchangeWithdrawContract",
		44: "ExchangeTransactionContract",
		45: "UpdateEnergyLimitContract",
		46: "AccountPermissionUpdateContract",
		48: "ClearABIContract",
		49: "UpdateBrokerageContract",
		51: "ShieldedTransferContract",
		52: "MarketSellAssetContract",
		53: "MarketCancelOrderContract",
	}
	Contract_ContractType_value = map[string]int32{
		"AccountCreateContract":           0,
		"TransferContract":                1,
		"TransferAssetContract":           2,
		"VoteAssetContract":               3,
		"VoteWitnessContract":             4,
		"WitnessCreateContract":           5,
		"AssetIssueContract":              6,
		"WitnessUpdateContract":           8,
		"ParticipateAssetIssueContract":   9,
		"AccountUpdateContract":           10,
		"FreezeBalanceContract":           11,
		"UnfreezeBalanceContract":         12,
		"WithdrawBalanceContract":         13,
		"UnfreezeAssetContract":           14,
		"UpdateAssetContract":             15,
		"ProposalCreateContract":          16,
		"ProposalApproveContract":         17,
		"ProposalDeleteContract":          18,
		"SetAccountIdContract":            19,
		"CustomContract":                  20,
		"CreateSmartContract":             30,
		"TriggerSmartContract":            31,
		"GetContract":                     32,
		"UpdateSettingContract":           33,
		"ExchangeCreateContract":          41,
		"ExchangeInjectContract":          42,
		"ExchangeWithdrawContract":        43,
		"ExchangeTransactionContract":     44,
		"UpdateEnergyLimitContract":       45,
		"AccountPermissionUpdateContract": 46,
		"ClearABIContract":                48,
		"UpdateBrokerageContract":         49,
		"ShieldedTransferContract":        51,
		"MarketSellAssetContract":         52,
		"MarketCancelOrderContract":       53,
	}
)

func (x Contract_ContractType) Enum() *Contract_ContractType {
	p := new(Contract_ContractType)
	*p = x
	return p
}

func (x Contract_ContractType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Contract_ContractType) Descriptor() protoreflect.EnumDescriptor {
	return file_raw_proto_enumTypes[0].Descriptor()
}

func (Contract_ContractType) Type() protoreflect.EnumType {
	return &file_raw_proto_enumTypes[0]
}

func (x Contract_ContractType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Contract_ContractType.Descriptor instead.
func (Contract_ContractType) EnumDescriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{3, 0}
}

type Raw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefBlockBytes []byte       `protobuf:"bytes,1,opt,name=ref_block_bytes,json=refBlockBytes,proto3" json:"ref_block_bytes,omitempty"`
	RefBlockNum   int64        `protobuf:"varint,3,opt,name=ref_block_num,json=refBlockNum,proto3" json:"ref_block_num,omitempty"`
	RefBlockHash  []byte       `protobuf:"bytes,4,opt,name=ref_block_hash,json=refBlockHash,proto3" json:"ref_block_hash,omitempty"`
	Expiration    int64        `protobuf:"varint,8,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Auths         []*Authority `protobuf:"bytes,9,rep,name=auths,proto3" json:"auths,omitempty"`
	// transaction note
	Data []byte `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
	//only support size = 1, repeated list here for extension
	Contract []*Contract `protobuf:"bytes,11,rep,name=contract,proto3" json:"contract,omitempty"`
	// scripts not used
	Scripts   []byte `protobuf:"bytes,12,opt,name=scripts,proto3" json:"scripts,omitempty"`
	Timestamp int64  `protobuf:"varint,14,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	FeeLimit  int64  `protobuf:"varint,18,opt,name=fee_limit,json=feeLimit,proto3" json:"fee_limit,omitempty"`
}

func (x *Raw) Reset() {
	*x = Raw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raw) ProtoMessage() {}

func (x *Raw) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raw.ProtoReflect.Descriptor instead.
func (*Raw) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{0}
}

func (x *Raw) GetRefBlockBytes() []byte {
	if x != nil {
		return x.RefBlockBytes
	}
	return nil
}

func (x *Raw) GetRefBlockNum() int64 {
	if x != nil {
		return x.RefBlockNum
	}
	return 0
}

func (x *Raw) GetRefBlockHash() []byte {
	if x != nil {
		return x.RefBlockHash
	}
	return nil
}

func (x *Raw) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *Raw) GetAuths() []*Authority {
	if x != nil {
		return x.Auths
	}
	return nil
}

func (x *Raw) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Raw) GetContract() []*Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *Raw) GetScripts() []byte {
	if x != nil {
		return x.Scripts
	}
	return nil
}

func (x *Raw) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Raw) GetFeeLimit() int64 {
	if x != nil {
		return x.FeeLimit
	}
	return 0
}

type Authority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account        *AccountId `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	PermissionName []byte     `protobuf:"bytes,2,opt,name=permission_name,json=permissionName,proto3" json:"permission_name,omitempty"`
}

func (x *Authority) Reset() {
	*x = Authority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authority) ProtoMessage() {}

func (x *Authority) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authority.ProtoReflect.Descriptor instead.
func (*Authority) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{1}
}

func (x *Authority) GetAccount() *AccountId {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *Authority) GetPermissionName() []byte {
	if x != nil {
		return x.PermissionName
	}
	return nil
}

// AccountId, (name, address) use name, (null, address) use address, (name, null) use name,
type AccountId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address []byte `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *AccountId) Reset() {
	*x = AccountId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountId) ProtoMessage() {}

func (x *AccountId) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountId.ProtoReflect.Descriptor instead.
func (*AccountId) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{2}
}

func (x *AccountId) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AccountId) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

type Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      Contract_ContractType `protobuf:"varint,1,opt,name=type,proto3,enum=protocol.Contract_ContractType" json:"type,omitempty"`
	Parameter *anypb.Any            `protobuf:"bytes,2,opt,name=parameter,proto3" json:"parameter,omitempty"`
	//  Parameter parameter = 2;
	Provider     []byte `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	ContractName []byte `protobuf:"bytes,4,opt,name=ContractName,proto3" json:"ContractName,omitempty"`
	PermissionId int32  `protobuf:"varint,5,opt,name=Permission_id,json=PermissionId,proto3" json:"Permission_id,omitempty"`
}

func (x *Contract) Reset() {
	*x = Contract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{3}
}

func (x *Contract) GetType() Contract_ContractType {
	if x != nil {
		return x.Type
	}
	return Contract_AccountCreateContract
}

func (x *Contract) GetParameter() *anypb.Any {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *Contract) GetProvider() []byte {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *Contract) GetContractName() []byte {
	if x != nil {
		return x.ContractName
	}
	return nil
}

func (x *Contract) GetPermissionId() int32 {
	if x != nil {
		return x.PermissionId
	}
	return 0
}

type TransferContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerAddress []byte `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	ToAddress    []byte `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Amount       int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TransferContract) Reset() {
	*x = TransferContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferContract) ProtoMessage() {}

func (x *TransferContract) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferContract.ProtoReflect.Descriptor instead.
func (*TransferContract) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{4}
}

func (x *TransferContract) GetOwnerAddress() []byte {
	if x != nil {
		return x.OwnerAddress
	}
	return nil
}

func (x *TransferContract) GetToAddress() []byte {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

func (x *TransferContract) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawData          *BlockHeaderRaw `protobuf:"bytes,1,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
	WitnessSignature []byte          `protobuf:"bytes,2,opt,name=witness_signature,json=witnessSignature,proto3" json:"witness_signature,omitempty"`
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{5}
}

func (x *BlockHeader) GetRawData() *BlockHeaderRaw {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *BlockHeader) GetWitnessSignature() []byte {
	if x != nil {
		return x.WitnessSignature
	}
	return nil
}

type BlockHeaderRaw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TxTrieRoot []byte `protobuf:"bytes,2,opt,name=txTrieRoot,proto3" json:"txTrieRoot,omitempty"`
	ParentHash []byte `protobuf:"bytes,3,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	//bytes nonce = 5;
	//bytes difficulty = 6;
	Number           int64  `protobuf:"varint,7,opt,name=number,proto3" json:"number,omitempty"`
	WitnessId        int64  `protobuf:"varint,8,opt,name=witness_id,json=witnessId,proto3" json:"witness_id,omitempty"`
	WitnessAddress   []byte `protobuf:"bytes,9,opt,name=witness_address,json=witnessAddress,proto3" json:"witness_address,omitempty"`
	Version          int32  `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
	AccountStateRoot []byte `protobuf:"bytes,11,opt,name=accountStateRoot,proto3" json:"accountStateRoot,omitempty"`
}

func (x *BlockHeaderRaw) Reset() {
	*x = BlockHeaderRaw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeaderRaw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeaderRaw) ProtoMessage() {}

func (x *BlockHeaderRaw) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeaderRaw.ProtoReflect.Descriptor instead.
func (*BlockHeaderRaw) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{5, 0}
}

func (x *BlockHeaderRaw) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BlockHeaderRaw) GetTxTrieRoot() []byte {
	if x != nil {
		return x.TxTrieRoot
	}
	return nil
}

func (x *BlockHeaderRaw) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *BlockHeaderRaw) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *BlockHeaderRaw) GetWitnessId() int64 {
	if x != nil {
		return x.WitnessId
	}
	return 0
}

func (x *BlockHeaderRaw) GetWitnessAddress() []byte {
	if x != nil {
		return x.WitnessAddress
	}
	return nil
}

func (x *BlockHeaderRaw) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BlockHeaderRaw) GetAccountStateRoot() []byte {
	if x != nil {
		return x.AccountStateRoot
	}
	return nil
}

var File_raw_proto protoreflect.FileDescriptor

var file_raw_proto_rawDesc = []byte{
	0x0a, 0x09, 0x72, 0x61, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xdb, 0x02, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x65,
	0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x61, 0x75,
	0x74, 0x68, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x05,
	0x61, 0x75, 0x74, 0x68, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x65, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x63,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa4,
	0x09, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc9, 0x07, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x6f, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x03, 0x12, 0x17, 0x0a,
	0x13, 0x56, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10,
	0x05, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x0b, 0x12, 0x1b, 0x0a,
	0x17, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x6e, 0x66, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x10, 0x11, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x12,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x13, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x14, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x1e, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10,
	0x1f, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x10, 0x20, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x21, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x29, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x10, 0x2a, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x10, 0x2b, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x10, 0x2c, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x10, 0x2d, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x2e, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x41, 0x42, 0x49, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x30, 0x12, 0x1b,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x31, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x33, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x10, 0x34, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x10, 0x35, 0x22, 0x6e, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfc, 0x02, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x72,
	0x61, 0x77, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x77,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x89, 0x02, 0x0a, 0x03, 0x72, 0x61, 0x77,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x78, 0x54, 0x72, 0x69, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x74, 0x78, 0x54, 0x72, 0x69, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_raw_proto_rawDescOnce sync.Once
	file_raw_proto_rawDescData = file_raw_proto_rawDesc
)

func file_raw_proto_rawDescGZIP() []byte {
	file_raw_proto_rawDescOnce.Do(func() {
		file_raw_proto_rawDescData = protoimpl.X.CompressGZIP(file_raw_proto_rawDescData)
	})
	return file_raw_proto_rawDescData
}

var file_raw_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_raw_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_raw_proto_goTypes = []interface{}{
	(Contract_ContractType)(0), // 0: protocol.Contract.ContractType
	(*Raw)(nil),                // 1: protocol.raw
	(*Authority)(nil),          // 2: protocol.authority
	(*AccountId)(nil),          // 3: protocol.AccountId
	(*Contract)(nil),           // 4: protocol.Contract
	(*TransferContract)(nil),   // 5: protocol.TransferContract
	(*BlockHeader)(nil),        // 6: protocol.BlockHeader
	(*BlockHeaderRaw)(nil),     // 7: protocol.BlockHeader.raw
	(*anypb.Any)(nil),          // 8: google.protobuf.Any
}
var file_raw_proto_depIdxs = []int32{
	2, // 0: protocol.raw.auths:type_name -> protocol.authority
	4, // 1: protocol.raw.contract:type_name -> protocol.Contract
	3, // 2: protocol.authority.account:type_name -> protocol.AccountId
	0, // 3: protocol.Contract.type:type_name -> protocol.Contract.ContractType
	8, // 4: protocol.Contract.parameter:type_name -> google.protobuf.Any
	7, // 5: protocol.BlockHeader.raw_data:type_name -> protocol.BlockHeader.raw
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_raw_proto_init() }
func file_raw_proto_init() {
	if File_raw_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_raw_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeaderRaw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_raw_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_raw_proto_goTypes,
		DependencyIndexes: file_raw_proto_depIdxs,
		EnumInfos:         file_raw_proto_enumTypes,
		MessageInfos:      file_raw_proto_msgTypes,
	}.Build()
	File_raw_proto = out.File
	file_raw_proto_rawDesc = nil
	file_raw_proto_goTypes = nil
	file_raw_proto_depIdxs = nil
}
